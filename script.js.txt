// script.js
const boardEl = document.getElementById('board');
const turnEl = document.getElementById('turn');
const msgEl = document.getElementById('message');
const scoreXEl = document.getElementById('scoreX');
const scoreOEl = document.getElementById('scoreO');
const scoreTEl = document.getElementById('scoreT');
const startBtn = document.getElementById('startGame');
const restartBtn = document.getElementById('restartGame');
const tieOverlay = document.getElementById('tieOverlay');

let board = Array(9).fill('');
let current = 'X';
let running = false;
let scores = { X: 0, O: 0, T: 0 };

const winCombos = [
  [0,1,2],[3,4,5],[6,7,8],
  [0,3,6],[1,4,7],[2,5,8],
  [0,4,8],[2,4,6]
];

function createCells() {
  boardEl.innerHTML = '';
  for (let i = 0; i < 9; i++) {
    const cell = document.createElement('div');
    cell.className = 'cell';
    cell.dataset.index = i;
    cell.addEventListener('click', onCellClick);
    boardEl.appendChild(cell);
  }
}

function onCellClick() {
  if (!running) return;
  const idx = this.dataset.index;
  if (board[idx]) return;

  board[idx] = current;
  this.textContent = current;
  this.classList.add(current.toLowerCase());

  const winner = checkWinner();
  if (winner) endGame(winner);
  else {
    current = current === 'X' ? 'O' : 'X';
    msgEl.textContent = `Turn: ${current}`;
  }
}

function checkWinner() {
  for (const [a, b, c] of winCombos) {
    if (board[a] && board[a] === board[b] && board[b] === board[c])
      return board[a];
  }
  if (board.every(Boolean)) return 'T';
  return null;
}

function endGame(winner) {
  running = false;

  if (winner === 'T') {
    scores.T++;
    scoreTEl.textContent = scores.T;

    // Show tie overlay
    tieOverlay.style.display = 'flex';

    // Hide overlay and start next round after 2 seconds
    setTimeout(() => {
      tieOverlay.style.display = 'none';
      resetRound();
    }, 2000);

  } else {
    scores[winner]++;
    updateScores();
    msgEl.textContent = `${winner} wins! ðŸŽ‰`;
    msgEl.className = 'win';

    // Celebrate winning cells
    for (const [a, b, c] of winCombos) {
      if (board[a] === winner && board[b] === winner && board[c] === winner) {
        [a, b, c].forEach(i => {
          boardEl.children[i].classList.add('celebrate');
        });
        break;
      }
    }

    // Continue to next round after a short delay
    setTimeout(resetRound, 1500);
  }
}

function updateScores() {
  scoreXEl.textContent = scores.X;
  scoreOEl.textContent = scores.O;
}

function resetRound() {
  board = Array(9).fill('');
  createCells();
  current = 'X';
  running = true;
  msgEl.textContent = `Turn: ${current}`;
  msgEl.className = '';
}

function restartGame() {
  scores = { X: 0, O: 0, T: 0 };
  updateScores();
  resetRound();
  msgEl.textContent = "Game restarted! X begins.";
}

startBtn.addEventListener('click', () => {
  createCells();
  running = true;
  msgEl.textContent = `Turn: ${current}`;
  boardEl.style.pointerEvents = 'auto';
});

restartBtn.addEventListener('click', restartGame);
